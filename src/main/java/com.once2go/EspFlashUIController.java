package com.once2go;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.File;

/**
 * Created by once2go on 14/06/17.
 */
public class EspFlashUIController implements IApplicationView {

    private IApplicationViewPresenter mIApplicationViewPresenter;

    private JPanel mainWindow;
    private JComboBox mComboPortCombo;
    private JComboBox mComboBaud;
    private JButton mConnectButton;
    private JButton mSelectButton;
    private JButton mFlashButton;
    private JProgressBar mProgressBar1;
    private JLabel mStatus;
    private JLabel mFirmwareInitPatch;
    private JTextArea mRxMonitor;
    private JScrollPane mScrollPane;
    private boolean isConnected;


    public EspFlashUIController(IApplicationViewPresenter iApplicationViewPresenter) {
        if (iApplicationViewPresenter == null) {
            throw new IllegalArgumentException("Presenter can't be null");
        }
        mIApplicationViewPresenter = iApplicationViewPresenter;
        setupComponents();
        mIApplicationViewPresenter.setApplicationView(this);
    }

    private void setupComponents() {
        mConnectButton.addActionListener(new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                if (!isConnected) {
                    String portName = String.valueOf(mComboPortCombo.getSelectedItem());
                    int speed = (Integer) mComboBaud.getSelectedItem();
                    isConnected = mIApplicationViewPresenter.connectToPort(portName, speed);
                    mConnectButton.setText("Disconnect");
                } else {
                    mIApplicationViewPresenter.disconnect();
                    isConnected = false;
                    mConnectButton.setText("Connect");
                }
                mFlashButton.setEnabled(isConnected);
            }
        });

        mSelectButton.addActionListener(new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                JFileChooser fc = new JFileChooser();
                fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                fc.setFileFilter(new FileFilter() {
                    @Override
                    public boolean accept(File file) {
                        return file.isDirectory() || file.getName().toLowerCase().equals("init.lua");
                    }

                    @Override
                    public String getDescription() {
                        return "init.lua files only";
                    }
                });
                fc.showOpenDialog(mainWindow);
                if (fc.showOpenDialog(mainWindow) == JFileChooser.APPROVE_OPTION) {
                    String path = fc.getSelectedFile().getParent();
                    mFirmwareInitPatch.setText(path);
                    mIApplicationViewPresenter.findInitFile(path);
                }
            }
        });

        mFlashButton.addActionListener(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                mIApplicationViewPresenter.flash();
            }
        });

        mFlashButton.setEnabled(false);
        mConnectButton.setEnabled(false);
        mProgressBar1.setMinimum(0);
        mProgressBar1.setMaximum(100);
        mProgressBar1.setStringPainted(true);
        mRxMonitor.setEditable(false);
    }

    @Override
    public void onDevicesReceived(String[] devices, int[] speedRates) {
        if (devices.length > 0) {
            mConnectButton.setEnabled(true);
        }
        for (String device : devices) {
            mComboPortCombo.addItem(device);
        }
        for (int speed : speedRates) {
            mComboBaud.addItem(speed);
        }
    }

    @Override
    public void onFlashingStarted() {
        mFlashButton.setEnabled(false);
    }

    @Override
    public void onFlashingFinished() {
        mFlashButton.setEnabled(true);
    }

    @Override
    public void onLineFromUartReceived(String rxLine) {
        mRxMonitor.append(rxLine);
        JScrollBar vertical = mScrollPane.getVerticalScrollBar();
        vertical.setValue(vertical.getMaximum());
    }

    @Override
    public void onFlashProgress(int progress, String progressStatus) {
        mStatus.setText(progressStatus);
        mProgressBar1.setValue(progress);
    }

    @Override
    public void onErrorReceived(String errorDescription) {

    }


    public JPanel getMainWindow() {
        return mainWindow;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainWindow = new JPanel();
        mainWindow.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(34, 7, new Insets(8, 8, 8, 8), -1, -1));
        mainWindow.setMaximumSize(new Dimension(860, 640));
        mainWindow.setMinimumSize(new Dimension(860, 640));
        mainWindow.setPreferredSize(new Dimension(860, 640));
        mComboPortCombo = new JComboBox();
        mainWindow.add(mComboPortCombo, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Port:");
        mainWindow.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mConnectButton = new JButton();
        mConnectButton.setActionCommand("connectToPort");
        mConnectButton.setText("Connect");
        mainWindow.add(mConnectButton, new com.intellij.uiDesigner.core.GridConstraints(0, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mComboBaud = new JComboBox();
        mainWindow.add(mComboBaud, new com.intellij.uiDesigner.core.GridConstraints(0, 5, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("\"init.lua\" path:");
        mainWindow.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mSelectButton = new JButton();
        mSelectButton.setText("Select");
        mainWindow.add(mSelectButton, new com.intellij.uiDesigner.core.GridConstraints(1, 6, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mProgressBar1 = new JProgressBar();
        mainWindow.add(mProgressBar1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 2, 6, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mStatus = new JLabel();
        mStatus.setText("...");
        mainWindow.add(mStatus, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 6, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Speed:");
        mainWindow.add(label3, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 3, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mFirmwareInitPatch = new JLabel();
        mFirmwareInitPatch.setText("...");
        mainWindow.add(mFirmwareInitPatch, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mScrollPane = new JScrollPane();
        mainWindow.add(mScrollPane, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 29, 6, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mRxMonitor = new JTextArea();
        mScrollPane.setViewportView(mRxMonitor);
        mFlashButton = new JButton();
        mFlashButton.setText("Flash");
        mainWindow.add(mFlashButton, new com.intellij.uiDesigner.core.GridConstraints(5, 6, 24, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainWindow;
    }
}
